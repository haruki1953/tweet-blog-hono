// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../data/sqlite.db"
}

model Post {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  addedAt      DateTime      @default(now())
  content      String
  isDeleted    Boolean       @default(false)
  images       Image[]       @relation("PostImages")
  imagesOrder  String?
  parentPost   Post?         @relation("PostReplies", fields: [parentPostId], references: [id])
  parentPostId String?
  replies      Post[]        @relation("PostReplies")
  // twitterId    String?   @unique
  // twitterLink  String?
  postForwards PostForward[] @relation("PostForwards")
  postImports  PostImport[]  @relation("PostImports")
}

model PostForward {
  id              String   @id @default(uuid())
  platform        String
  platformPostId  String
  link            String
  forwardAt       DateTime @default(now())
  forwardConfigId String
  post            Post     @relation("PostForwards", fields: [postId], references: [id], onDelete: Cascade)
  postId          String
}

model PostImport {
  id             String   @id @default(uuid())
  platform       String
  platformPostId String
  link           String
  importedAt     DateTime @default(now())
  post           Post     @relation("PostImports", fields: [postId], references: [id], onDelete: Cascade)
  postId         String
}

model Image {
  id            String         @id @default(uuid())
  alt           String?
  path          String
  addedAt       DateTime       @default(now())
  smallSize     Int            @default(0)
  largeSize     Int            @default(0)
  originalSize  Int            @default(0)
  originalPath  String?
  posts         Post[]         @relation("PostImages")
  imageImports  ImageImport[]  @relation("ImageImports")
  imageForwards ImageForward[] @relation("ImageForwards")
}

model ImageForward {
  id              String   @id @default(uuid())
  platform        String
  platformImageId String
  link            String
  forwardAt       DateTime @default(now())
  forwardConfigId String
  image           Image    @relation("ImageForwards", fields: [imageId], references: [id], onDelete: Cascade)
  imageId         String
}

model ImageImport {
  id              String   @id @default(uuid())
  platform        String
  platformImageId String
  link            String
  importedAt      DateTime @default(now())
  image           Image    @relation("ImageImports", fields: [imageId], references: [id], onDelete: Cascade)
  imageId         String
}

model Log {
  id        String   @id @default(uuid())
  title     String?
  content   String
  type      String
  createdAt DateTime @default(now())
}
